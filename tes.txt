package view;

import contract.IMap;
import contract.IMobile;
import model.allElements.Element;
import model.allElements.mobileElem.Player;
import model.allElements.staticElem.Rock;
import model.allElements.staticElem.Wall;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import javax.swing.*;
import java.awt.*;
import java.awt.event.KeyEvent;


import java.awt.event.KeyListener;
import java.awt.image.BufferedImage;
import java.io.IOException;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;


public class BoulderDashViewTest {

    private IMap map;
    private IMobile player;
    private BoulderDashView view;

    @BeforeEach
    public void setup() throws InterruptedException {

        map = new mock();
        player = new mock();
        view = new BoulderDashView(map);
        view.setPlayer(player);

    }

    @Test
    public void testGetPlayer() {
        IMobile Player = view.getPlayer();
        Assertions.assertNotNull(Player);
        Assertions.assertEquals(player, Player);
    }

    @Test
    public void testGetMap() {
        IMap Map = view.getMap();
        Assertions.assertNotNull(Map);
        Assertions.assertEquals(map, Map);
    }
    @Test
    void testHandleKeyPressed() {
        JLabel[][] labels = new JLabel[40][22];
        ImageIcon playerIcon = new ImageIcon();
        JLabel playerLabel = new JLabel(playerIcon);
        labels[10][10] = playerLabel;

        view.setLabels(labels);

   // la on met des positions initiales quelconques que l'on remplacera .
        player.setPosition(new Point(10, 10));

        // Appuie sur la touche 'W' pour déplacer le joueur vers le haut
        KeyEvent eventW = new KeyEvent(new JLabel(), KeyEvent.KEY_PRESSED, System.currentTimeMillis(), 0, KeyEvent.VK_W, 'W');
        view.handleKeyPressed(eventW);
        assertEquals(new Point(10, 9), player.getPosition());

        // Appuie sur la touche 'S' pour déplacer le joueur vers le bas
        KeyEvent eventS = new KeyEvent(new JLabel(), KeyEvent.KEY_PRESSED, System.currentTimeMillis(), 0, KeyEvent.VK_S, 'S');
        view.handleKeyPressed(eventS);
        assertEquals(new Point(10, 10), player.getPosition());

        // Appuie sur la touche 'A' pour déplacer le joueur vers la gauche
        KeyEvent eventA = new KeyEvent(new JLabel(), KeyEvent.KEY_PRESSED, System.currentTimeMillis(), 0, KeyEvent.VK_A, 'A');
        view.handleKeyPressed(eventA);
        assertEquals(new Point(9, 10), player.getPosition());

        // Appuie sur la touche 'D' pour déplacer le joueur vers la droite
        KeyEvent eventD = new KeyEvent(new JLabel(), KeyEvent.KEY_PRESSED, System.currentTimeMillis(), 0, KeyEvent.VK_D, 'D');
        view.handleKeyPressed(eventD);
        assertEquals(new Point(10, 10), player.getPosition());
    }
    @Test
    void testHandleKeyTyped() {
        JLabel[][] labels = new JLabel[40][22];
        ImageIcon playerIcon = new ImageIcon();
        JLabel playerLabel = new JLabel(playerIcon);
        labels[10][10] = playerLabel;
        view.setLabels(labels);
        player.setPosition(new Point(10, 10));
        KeyEvent eventA = new KeyEvent(new JLabel(), KeyEvent.KEY_TYPED, System.currentTimeMillis(), 0, KeyEvent.VK_UNDEFINED, 'E');
        view.keyTyped(eventA);
        KeyEvent eventW = new KeyEvent(new JLabel(), KeyEvent.KEY_TYPED, System.currentTimeMillis(), 0, KeyEvent.VK_UNDEFINED, 'Q');
        view.keyTyped(eventW);
        KeyEvent eventS = new KeyEvent(new JLabel(), KeyEvent.KEY_TYPED, System.currentTimeMillis(), 0, KeyEvent.VK_UNDEFINED, 'Q');
        view.keyTyped(eventS);
        KeyEvent eventD = new KeyEvent(new JLabel(), KeyEvent.KEY_TYPED, System.currentTimeMillis(), 0, KeyEvent.VK_UNDEFINED, 'Q');
        view.keyTyped(eventD);
    }
    @Test
    void testHandleKeyReleased() {
        JLabel[][] labels = new JLabel[40][22];
        ImageIcon playerIcon = new ImageIcon();
        JLabel playerLabel = new JLabel(playerIcon);
        labels[10][10] = playerLabel;
        view.setLabels(labels);
        player.setPosition(new Point(10, 10));
        KeyEvent eventW = new KeyEvent(new JLabel(), KeyEvent.KEY_RELEASED, System.currentTimeMillis(), 0, KeyEvent.VK_W, 'W');
        view.keyReleased(eventW);
        KeyEvent eventS = new KeyEvent(new JLabel(), KeyEvent.KEY_RELEASED, System.currentTimeMillis(), 0, KeyEvent.VK_S, 'S');
        view.keyReleased(eventS);
        KeyEvent eventA = new KeyEvent(new JLabel(), KeyEvent.KEY_RELEASED, System.currentTimeMillis(), 0, KeyEvent.VK_A, 'A');
        view.keyReleased(eventA);
        KeyEvent eventD = new KeyEvent(new JLabel(), KeyEvent.KEY_RELEASED, System.currentTimeMillis(), 0, KeyEvent.VK_D, 'D');
        view.keyReleased(eventD);

    }
}

